from telegram import Bot, InputMediaPhoto, InputMediaVideo
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.request import HTTPXRequest

from app.config.env import ENVSettings
from app.models.movie import MovieDTO


TOKEN = ENVSettings.TELEGRAM_BOT_TOKEN
CHAT_ID = ENVSettings.TELEGRAM_CHAT_ID

bot = Bot(token=TOKEN)


class TelegramService:

    @staticmethod
    def make_posts_to_channel(movies: MovieDTO):
        messages = []

        for movie in movies:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫, –∫—É–¥–∏ –±—É–¥–µ–º–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_parts = []

            if "title" in movie:
                message_parts.append(f"üìΩÔ∏è –ù–∞–∑–≤–∞: {movie['title']}")

            if "rating" in movie:
                message_parts.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}")

            if "quality" in movie:
                message_parts.append(f"üé• –Ø–∫—ñ—Å—Ç—å: {movie['quality']}")

            if "year" in movie["details"]:
                message_parts.append(f"üìÖ –†—ñ–∫ –≤–∏—Ö–æ–¥—É: {movie['details']['year']}")

            if "age_rating" in movie["details"]:
                message_parts.append(
                    f"üîû –í—ñ–∫. —Ä–µ–π—Ç–∏–Ω–≥: {movie['details']['age_rating']}"
                )

            if "country" in movie["details"]:
                message_parts.append(f"üåç –ö—Ä–∞—ó–Ω–∞: {movie['details']['country']}")

            if "genre" in movie["details"]:
                message_parts.append(f"üé¨ –ñ–∞–Ω—Ä: {movie['details']['genre']}")

            if "director" in movie["details"]:
                message_parts.append(f"üé¨ –†–µ–∂–∏—Å–µ—Ä: {movie['details']['director']}")

            if "actors" in movie["details"]:
                message_parts.append(f"üë• –ê–∫—Ç–æ—Ä–∏: {movie['details']['actors']}")

            if "duration" in movie["details"]:
                message_parts.append(f"‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {movie['details']['duration']}")

            if "language" in movie["details"]:
                message_parts.append(f"üó£Ô∏è –ú–æ–≤–∞: {movie['details']['language']}")

            if "imdb_rating" in movie["details"]:
                message_parts.append(
                    f"üåê IMDb —Ä–µ–π—Ç–∏–Ω–≥: {movie['details']['imdb_rating']}"
                )

            # if "description" in movie["details"]:
            #     message_parts.append(f"üìù –û–ø–∏—Å: {movie['details']['description']}")

            if "trailer" in movie["details"]:
                message_parts.append(f"üéûÔ∏è –¢—Ä–µ–π–ª–µ—Ä: {movie['details']['trailer']}")

            if "full_video" in movie["details"]:
                message_parts.append(
                    f"üéûÔ∏è –ü–æ–≤–Ω–∏–π —Ñ—ñ–ª—å–º: {movie['details']['full_video']}"
                )

            # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = "\n".join(message_parts)
            messages.append(
                {
                    "text": message,
                    "image_url": movie["image_url"],
                    "video_url": movie["details"]["full_video"],
                    "url_button": movie["link"],
                }
            )

        return messages

    @staticmethod
    async def send_posts(posts):
        try:
            for post in posts:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Å—Ç –º–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª—é—á—ñ
                if not all(key in post for key in ["image_url", "text", "url_button"]):
                    print(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –ø–æ—Å—Ç—ñ: {post}")
                    continue

                # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –º–µ–¥—ñ–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                media = [
                    InputMediaPhoto(media=post["image_url"], caption=post["text"]),
                    # InputMediaVideo(media=open("help/downloaded_video.mp4", "rb")),
                ]

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–ª—å–±–æ–º
                await bot.send_media_group(chat_id=CHAT_ID, media=media)
                print("–í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

            return {"status": "success", "message": "–ü–æ—Å—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"}

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            return {"status": "error", "message": str(e)}

    @staticmethod
    async def send_video(video_path: str = "testvideo.mp4"):
        try:
            with open(video_path, "rb") as video_file:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–µ–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏
                await bot.send_video(
                    chat_id=CHAT_ID,
                    video="trailer.mp4",
                )

            print("–í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return {"status": "success", "message": "–í—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"}

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
            return {"status": "error", "message": str(e)}
